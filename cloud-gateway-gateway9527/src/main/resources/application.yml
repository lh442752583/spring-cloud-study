server:
  port: 9527


spring:
  application:
    name: cloud-gateway

# gateway的集群可以将此gateway的微服务复制一份然后改下端口号，然后通过nginx进行负载均衡配置即可！！！！
#说明，gateway一般可以做客户端的路由然后注册到eureka里面根据服务名称进行负载均衡的调用
#  cloud:
#    gateway:
#      routes:
#        - id: routh1 #路由的ID，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost   #匹配后提供服务的路由地址
#          predicates:
#            - Path=/consumer/hystrix/ok/**   #断言,路径相匹配的进行路由

#        - id: routh2
#          uri: http://localhost
#          predicates:
#            - Path=/consumer/hystrix/timeout/**   #断言,路径相匹配的进行路由


# gateway的集群可以将此gateway的微服务复制一份然后改下端口号，然后通过nginx进行负载均衡配置即可！！！！
#说明，为了测试方便，我用的是直接路由到服务端，进行测试，今后可以切换到客户端
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true  #开启从注册中心动态创建路由的功能，利用微服务名进行路由
#          lower-case-service-id: true  #微服务名称以小写形式呈现
      routes:
        - id: routh1 #路由的ID，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001   #匹配后提供服务的路由地址
          uri: lb://CLOUD-PAY-SERVICE     #lb:负载均衡  后面是服务的名称,以后写客户端的服务名称
          predicates:
            - Path=/pay/get/**   #断言,路径相匹配的进行路由
            - After=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]
          #下面这里也可以配置过滤器（filter:），不过一般会写个全局过滤器在config包里自己定义

        - id: routh2
          #uri: http://localhost:8001   #匹配后提供服务的路由地址
          uri: lb://CLOUD-PAY-SERVICE
          predicates:
            - Path=/pay/add/**   #断言,路径相匹配的进行路由
          #下面这里也可以配置过滤器（filter:），不过一般会写个全局过滤器在config包里自己定义




eureka:
  instance:
    hostname: cloud-gateway-service
  client:
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka